#!/usr/bin/env sh

set -xe

NODE_ENV=production
node_vers="9.8.0"
node_builds="https://nodejs.org/dist/v$node_vers"
node_base="node-v$node_vers"
node_lin="$node_base-linux-x64"
node_mac="$node_base-darwin-x64"
node_win="$node_base-win-x64"
target_arch=x86_64
script_dir=`dirname $0`
app_version=$($script_dir/npm-pkg-version)
root_dir=$script_dir/..
default_yml_config=$root_dir/.ferret-default.yml
build_dir=$root_dir/build
dist_dir=$root_dir/dist
lib_dir=$build_dir/lib

get_node_pkgs() {
  if [ ! -f "$lib_dir/$node_lin.tar.gz" ]; then
    curl "$node_builds/$node_lin.tar.gz" > "$lib_dir/$node_lin.tar.gz"
    cd $lib_dir
    tar -xf $node_lin.tar.gz
    cd -
  fi

  if [ ! -f "$lib_dir/$node_mac.tar.gz" ]; then
    curl "$node_builds/$node_mac.tar.gz" > "$lib_dir/$node_mac.tar.gz"
    cd $lib_dir
    tar -xf $node_mac.tar.gz
    cd -
  fi

  if [ ! -f "$lib_dir/$node_win.zip" ]; then
    curl "$node_builds/$node_win.zip" > "$lib_dir/$node_win.zip"
    cd $lib_dir
    unzip $node_win.zip > /dev/null
    cd -
  fi
}

build() {
  target="$target_os"

  full_target=ferret-$app_version-$target_os-$target_arch
  target_dist=$dist_dir/$full_target

  mkdir -p $target_dist

  # copy over all plugins
  cp -r $build_dir/node_modules $target_dist/node_modules

  # copy over license/readme
  cp $root_dir/README.md $target_dist/.
  cp $root_dir/CHANGELOG.md $target_dist/.
  cp $root_dir/LICENSE $target_dist/.

  # copy over all default config
  mkdir $target_dist/default
  cp $default_yml_config $target_dist/default/.ferret.yml
  for i in $root_dir/meta/*
  do
    meta_dir=`basename $i`
    if [ -d "$i/default" ]; then
      cp -r $i/default $target_dist/default/$meta_dir
    fi
  done

  # bin shims
  if [ "$target" = "win" ]; then
    cp $build_dir/bin/ferret.cmd $target_dist/.
  else
    cp $build_dir/bin/ferret $target_dist/.
  fi

  # debug..
  #cp -rf $root_dir/lib/* $target_dist/node_modules/@forthright/ferret/lib/.
  #cp -rf $root_dir/bin/ferret $target_dist/node_modules/@forthright/ferret/bin/.

  # copy over node
  mkdir $target_dist/lib
  cp -r $lib_dir/$target_node $target_dist/lib/node

  # until this pkg gets removed from dev deps
  rm -r $target_dist/node_modules/snyk*

  # clean out some other stuff
  rm -r $target_dist/node_modules/**/*.map
  rm -r $target_dist/node_modules/**/test
  rm -r $target_dist/node_modules/**/example

  if [ "$target" = "win" ]; then
    archive_name="$full_target.zip"
    cd $target_dist
    zip -qr ../$archive_name *
    cd -
  else
    archive_name="$full_target.tar.gz"
    tar -C $target_dist/.. -czf $target_dist/../$archive_name $full_target
  fi
}

clean() {
  npm run clean
  rm -rf $dist_dir
  mkdir $dist_dir
}

prepare() {
  npm run compile

  cd $build_dir

  npm i --loglevel error
  npm update --loglevel error

  if [ ! -d "lib" ]; then
    mkdir lib
  fi

  cd -
}

clean

prepare

get_node_pkgs

target_os=linux
target_node=$node_lin
build

target_os=win
target_node=$node_win
build

target_os=mac
target_node=$node_mac
build

tree -na -L 2 $dist_dir

du -hs $dist_dir
